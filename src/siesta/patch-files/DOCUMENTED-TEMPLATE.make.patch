--- siesta-3.2.1/Src/Sys/DOCUMENTED-TEMPLATE.make	2015-10-20 06:52:42.000000000 -0700
+++ patch-files/DOCUMENTED-TEMPLATE.make	2015-12-17 16:09:44.318615678 -0800
@@ -24,20 +24,20 @@
 #
 # This string will be copied to the executable, so it pays to
 # use something meaningful
-SIESTA_ARCH=cscs-ibm-blanc-mpi
+SIESTA_ARCH=linux64-mpi
 
 #
 # In case your compiler does not understand the special meaning of 
 # the .F and .F90 extensions ("files in need of preprocessing"), you
 # will need to use an explicit preprocessing step.
-FPP=/opt/ibmcmp/xlf/10.1/exe/cpp
+FPP=
 
 #
 # FC is typically the name of your fortran compiler. It is not always
 # a good idea to add options here, except when they are essential for
 # a proper operation. For example, here we request 64 bits and a special
 # sub-compiler.
-FC=mpfort -m64 -compiler xlf95_r
+FC=mpif90
 #
 # The FC_SERIAL symbol is useful in at least two cases:
 #   1. When the "MPI compiler environment" is so complex that it might
@@ -46,31 +46,31 @@
 #      the computer centers as "queuing-system-only". 
 # Most utilities are thus compiled with FC_SERIAL, which in practice
 # defaults to FC if it is not defined.
-FC_SERIAL=xlf95_r -q64
+FC_SERIAL=mpif90
 #
 # Here we should put mainly optimization flags
-FFLAGS=-O3 -qstrict -qarch=pwr5 -qtune=pwr5 -qcache=auto -qessl
+FFLAGS=-O3 AVXFLAG -fcheck=all
 #
 # Some systems do not have 'ranlib'. If so, use "echo" instead of "ranlib"
 RANLIB=ranlib
 
 # A compiler-specific file holding special versions of some routines
 # For most f95 compilers, "nag" should work. (The name is historical)
-SYS=xlf   # for IBM machines
-#SYS=nag
+#SYS=xlf   # for IBM machines
+SYS=nag
 
 # These symbols should not need to be specified. They will be detected
 # automatically at the time of compiling the MPI interface. Set them
 # only if the automatic detection fails and you are sure of their values.
-SP_KIND=1
-DP_KIND=8
-KINDS=$(SP_KIND) $(DP_KIND)
+#SP_KIND=1
+#DP_KIND=8
+#KINDS=$(SP_KIND) $(DP_KIND)
 
 # Some compilers (notably IBM's) are not happy with the standard 
 # syntax for definition of preprocessor symbols ( -DSOME_SYMBOL),
 # and thy need a prefix (i.e. WF,-DSOME_SYMBOL). This is used
 # in some utility makefiles.
-DEFS_PREFIX=-WF,
+DEFS_PREFIX=
 
 #
 # Used only at the linking stage. For example, you might neeed "-static"
@@ -86,9 +86,9 @@
 # These symbols help to keep the building rules concise
 # (they are generated automatically by the 'configure' script
 # in some cases) 
-FCFLAGS_fixed_f=-qfixed -qsuffix=cpp=f
+FCFLAGS_fixed_f=
 FCFLAGS_free_f90=
-FPPFLAGS_fixed_F=-qfixed -qsuffix=cpp=F
+FPPFLAGS_fixed_F=
 FPPFLAGS_free_F90=
 
 #
@@ -97,11 +97,6 @@
 # using the -L flag to define search directories (see examples
 # in this directory).
 #
-BLAS_LIBS=-lessl
-LAPACK_LIBS=/apps/lapack/3.1.1/XL/lib/liblapack_ppc64.a -lessl
-BLACS_LIBS=/apps/scalapack/64/lib/blacsCinit_MPI-ppc64-0.a /apps/scalapack/64/lib/blacsF77init_MPI-ppc64-0.a /apps/scalapack/64/lib/blacs_MPI-ppc64-0.a
-SCALAPACK_LIBS=/apps/scalapack/64/lib/blacsCinit_MPI-ppc64-0.a /apps/scalapack/64/lib/blacs_MPI-ppc64-0.a -L/apps/scalapack/64/lib -lscalapack
-#
 # If you are using a "wrapper compiler" such as mpif90, MPI_LIBS can
 # be left empty. If not, you might need something like -L somepath/ -l mpi ....
 #
@@ -122,9 +117,9 @@
 # with the other options (for example, 32/64 bit). Don't forget
 # to set -DCDF below.
 #
-NETCDF_ROOT=/apps/netcdf/64
+NETCDF_ROOT=ROLLNETCDF
 NETCDF_INCFLAGS=-I$(NETCDF_ROOT)/include
-NETCDF_LIBS=-L$(NETCDF_ROOT)/lib -lnetcdf
+NETCDF_LIBS=-L$(NETCDF_ROOT)/lib -lhdf5 -lnetcdff -lnetcdf
 
 #
 # This (as well as the -DMPI definition) is essential for MPI support
@@ -143,16 +138,14 @@
 #
 # For old versions of gfortran, add -DGFORTRAN
 #
-FPPFLAGS= -WF,-DMPI -WF,-DFC_HAVE_ABORT -WF,-DCDF
+FPPFLAGS= -DMPI -DCDF
 #
 # We put here all the neeeded libraries.
 # Sometimes the BLAS are included in LAPACK (or it could be that everything
 # is included in SCALAPACK...). You might need to experiment if you find 
 # duplicate symbols. See examples in this directory.
 #
-LIBS=$(NETCDF_LIBS) $(SCALAPACK_LIBS) $(BLACS_LIBS) $(LAPACK_LIBS) \
-     $(MPI_LIBS) $(COMP_LIBS)
-
+LIBS=-LROLLMKL -lmkl_rt -lmkl_scalapack_lp64 -lmkl_blacs_lp64 $(MPI_LIBS) $(COMP_LIBS) $(NETCDF_LIBS)
 # Dependency rules ---------
 
 # Some compilers are not able to compile certain files with full optimization,
